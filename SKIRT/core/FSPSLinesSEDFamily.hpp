/*//////////////////////////////////////////////////////////////////
////     The SKIRT project -- advanced radiative transfer       ////
////       Â© Astronomical Observatory, Ghent University         ////
///////////////////////////////////////////////////////////////// */

#ifndef FSPSLINESSEDFAMILY_HPP
#define FSPSLINESSEDFAMILY_HPP

#include "SEDFamily.hpp"
#include "StoredTable.hpp"

//////////////////////////////////////////////////////////////////////

/** 
    An instance of the FSPSLinesSEDFamily class represents a family of single stellar populations (SSPs)
    with the addition of nebular continuum and emission lines, parameterized on metallicity, age
    and ionization parameter, generated by the FSPS code (Conroy, Gunn, & White 2009, Conroy & Gunn 2010,
    Byler et al. 2017), assuming a Kroupa initial mass function.

    We used the Python-FSPS package, obtained from https://dfm.io/python-fsps/, to generate SED families
    with the default configuration: MIST isochrones and the MILES spectral libraries, for Kroupa IMF and
    the addition of nebular emission, excluiding dust attenuation.

    The SEDs are tabulated over a wavelength range from 0.009 \f$\mu\mathrm{m}\f$ to 10000
    \f$\mu\mathrm{m}\f$. To cover SKITR's requirements, we did an oversample of the wavelengths containing
    the nebular emission lines.

    The %SED templates used with this class are scaled by the initial mass of the SSP
    and parameterized on metallicity and age. The file containing the SEDs have five dimension: lambda(m),
    Z(1), t(yr), U(1) and Llambda(W/m), with units as listed between parentheses. The parameter U contains
    the information about the ionization parameter, key when incluiding nebular continuum and line emission
    in the spectra.

    When imported from a text column file, the parameters for this %SED family must appear in the
    following order in the specified default units (unless these units are overridden by column
    header info): \f[ M_\mathrm{init}\,(\mathrm{M}_\odot) \quad Z\,(\mathrm{dimensionless}) \quad
    t\,(\mathrm{yr}) \quad [U\,(\mathrm{dimensionless})] \f] where the last column should appear
    as decimal number.*/
class FSPSLinesSEDFamily : public SEDFamily
{
    ITEM_CONCRETE(FSPSLinesSEDFamily, SEDFamily, "an FSPS with nebular emission SED family for single stellar populations")

        //NOT SO SURE ABOUT THIS
        ATTRIBUTE_DEFAULT_VALUE(imf, "Kroupa")
        //ATTRIBUTE_TYPE_DISPLAYED_IF(FSPSLinesSEDFamily, "Level2")

    ITEM_END()

    //============= Construction - Setup - Destruction =============

public:
    /** This constructor can be invoked programmatically by classes that use a hard-coded SED
        family (as opposed to selected through the ski file). Before the constructor returns, the
        newly created object is hooked up as a child to the specified parent in the simulation
        hierarchy (so it will automatically be deleted), and its setup() function has been called.
        */
    explicit FSPSLinesSEDFamily(SimulationItem* parent);

protected:
    /** This function opens the appropriate resource file (in SKIRT stored table format). */
    void setupSelfBefore() override;

    //====================== Other functions =====================

public:
    /** This function returns the number and type of parameters used by this particular %SED family
        as a list of SnapshotParameter objects. Each of these objects specifies unit information
        and a human-readable descripton for the parameter. */
    vector<SnapshotParameter> parameterInfo() const override;

    /** This function returns the intrinsic wavelength range of the %SED family. It retrieves this
        range from the underlying stored table. */
    Range intrinsicWavelengthRange() const override;

    /** This function returns the specific luminosity \f$L_\lambda\f$ (i.e. radiative power per
        unit of wavelength) for the %SED with the specified parameters at the specified wavelength,
        or zero if the wavelength is outside of the %SED's intrinsic wavelength range. The number
        and type of parameters must match the information returned by the parameterInfo() function;
        if not the behavior is undefined. */
    double specificLuminosity(double wavelength, const Array& parameters) const override;

    /** This function constructs both the normalized probability density function (pdf) and the
        corresponding normalized cumulative distribution function (cdf) for the %SED with the
        specified parameters over the specified wavelength range. The function returns the
        normalization factor. The number and type of parameters must match the information returned
        by the parameterInfo() function; if not the behavior is undefined. */
    double cdf(Array& lambdav, Array& pv, Array& Pv, const Range& wavelengthRange,
               const Array& parameters) const override;

    //====================== Data members =====================

private:
    StoredTable<4> _table4;
};

////////////////////////////////////////////////////////////////////

#endif
